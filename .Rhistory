fetch_pubmed('10.5588/ijtld.24.0503') ->a
View(a)
a[["authors"]]
# ----- FORMAT AUTHORS FOR PUBMED -----
format_authors_pubmed <- function(df) {
if (nrow(df) == 0) return("[]")
names_vec <- df$name
me_idx <- grep('Ranzani',names_vec,ignore.case = TRUE)
me_name <- "- otavioranzani"
n <- length(names_vec)
out <- c()
if (n <= 10) {
# List all authors, replacing your name
for (i in seq_len(n)) {
if (i %in% me_idx) {
out <- c(out, me_name)
} else {
out <- c(out, paste0("- ", names_vec[i]))
}
}
} else {
# >10 authors: first 3, last 2, insert you if not among them
first3 <- names_vec[1:3]
last2  <- names_vec[(n-1):n]
# Check if you are already in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(1:3, (n-1):n))) {
# You are not in first3 or last2 → put dots around
middle <- c("- ..", me_name, "- ...")
}
}
# Combine final list
out <- c(
paste0("- ", first3),
middle,
paste0("- ", last2)
)
}
out
}
# ----- FETCH PUBMED BY DOI -----
fetch_pubmed <- function(doi){
res <- entrez_search(db="pubmed", term=paste0(doi,"[DOI]"))
if(length(res$ids) == 0) return(NULL)
entrez_summary(db="pubmed", id=res$ids[1])
}
# ----- LOOP DOIs -----
for (doi in dois) {
rec <- fetch_pubmed(doi)
if(is.null(rec)) next
# Title
title <- escape_yaml(rec$title)
title <- gsub("\\.$", "", title)
# Authors
authors_yaml <- format_authors_pubmed(rec$authors)
# Journal info
journal <- escape_yaml(rec$fulljournalname)
volume  <- if(!is.null(rec$volume)) rec$volume else ""
issue   <- if(!is.null(rec$issue)) rec$issue else ""
pages   <- if(!is.null(rec$pages)) rec$pages else ""
journal_clean <- gsub("\\.$", "", journal)
# Build "publication" string
pub_str <- paste0(
"**", journal_clean, "**",
if(volume!="") paste0(". ", volume) else "",
if(issue!="") paste0("(", issue, ")") else "",
if(pages!="") paste0(":", pages) else "",
if(!is.null(rec$elocationid) && nzchar(rec$elocationid)) {
paste0(". <a href='https://doi.org/", doi,
"' target='_blank' rel='noopener noreferrer'>", doi, "</a>")
} else ""
)
# Use PubMed pubdate
pubdate_raw <- rec$pubdate  # e.g., "2024 Aug 27"
# Try to parse full date
date_parsed <- parse_date_time(pubdate_raw, orders = c("Y b d", "Y b", "Y"))
# Fallback if parsing fails
if (is.na(date_parsed)) {
year <- substr(pubdate_raw, 1, 4)
date_parsed <- ymd(paste0(year, "-01-01"))
}
# Format as YYYY-MM-DD
date <- format(date_parsed, "%Y-%m-%d")
# Filename with counter to avoid overwrites
first_author <- rec$sortfirstauthor
first_author <- gsub("[^A-Za-z0-9]", "", first_author)
base_name <- paste0(first_author, year)
file_name <- file.path(output_dir, paste0(base_name, ".md"))
counter <- 1
while (file.exists(file_name)) {
file_name <- file.path(output_dir, paste0(base_name, "_", counter, ".md"))
counter <- counter + 1
}
# Build front matter
fm <- c(
"---",
paste0('title: "', title, '"'),
paste0('publication: "', pub_str, '"'),
"authors:",
authors_yaml,
paste0('date: "', date, '"'),
"---"
)
# Write file
writeLines(fm, file_name, useBytes = TRUE)
message("✅ Written: ", file_name)
}
# ----- LOOP DOIs -----
for (doi in dois) {
rec <- fetch_pubmed(doi)
if(is.null(rec)) next
# Title
title <- escape_yaml(rec$title)
title <- gsub("\\.$", "", title)
# Authors
authors_yaml <- format_authors_pubmed(rec$authors)
# Journal info
journal <- escape_yaml(rec$fulljournalname)
volume  <- if(!is.null(rec$volume)) rec$volume else ""
issue   <- if(!is.null(rec$issue)) rec$issue else ""
pages   <- if(!is.null(rec$pages)) rec$pages else ""
journal_clean <- gsub("\\.$", "", journal)
# Build "publication" string
pub_str <- paste0(
"**", journal_clean, "**",
if(volume!="") paste0(". ", volume) else "",
if(issue!="") paste0("(", issue, ")") else "",
if(pages!="") paste0(":", pages) else "",
if(!is.null(rec$elocationid) && nzchar(rec$elocationid)) {
paste0(". <a href='https://doi.org/", doi,
"' target='_blank' rel='noopener noreferrer'>", doi, "</a>")
} else ""
)
# Use PubMed pubdate
pubdate_raw <- rec$pubdate  # e.g., "2024 Aug 27"
# Try to parse full date
date_parsed <- parse_date_time(pubdate_raw, orders = c("Y b d", "Y b", "Y"))
# Fallback if parsing fails
if (is.na(date_parsed)) {
year <- substr(pubdate_raw, 1, 4)
date_parsed <- ymd(paste0(year, "-01-01"))
}
# Format as YYYY-MM-DD
date <- format(date_parsed, "%Y-%m-%d")
# Filename with counter to avoid overwrites
first_author <- rec$sortfirstauthor
first_author <- gsub("[^A-Za-z0-9]", "", first_author)
base_name <- paste0(first_author, year)
file_name <- file.path(output_dir, paste0(base_name, ".md"))
counter <- 1
while (file.exists(file_name)) {
file_name <- file.path(output_dir, paste0(base_name, "_", counter, ".md"))
counter <- counter + 1
}
# Build front matter
fm <- c(
"---",
paste0('title: "', title, '"'),
paste0('publication: "', pub_str, '"'),
"authors:",
authors_yaml,
paste0('date: "', date, '"'),
"---"
)
# Write file
writeLines(fm, file_name, useBytes = TRUE)
message("✅ Written: ", file_name)
}
fetch_pubmed('10.1097/ee9.0000000000000360') ->a
View(a)
View(a[["authors"]])
# ----- FORMAT AUTHORS FOR PUBMED -----
format_authors_pubmed <- function(df) {
if (nrow(df) == 0) return("[]")
names_vec <- as.character(df$name)  # ensure character, not factor
names_vec <- trimws(names_vec)       # remove leading/trailing spaces
me_idx <- grep("Ranzani", names_vec, ignore.case = TRUE)
me_name <- "- otavioranzani"
n <- length(names_vec)
out <- c()
if (n <= 10) {
# List all authors, replacing your name
for (i in seq_len(n)) {
if (i %in% me_idx) {
out <- c(out, me_name)
} else {
out <- c(out, paste0("- ", names_vec[i]))
}
}
} else {
# >10 authors: first 3, last 2, insert you if not among them
first3 <- names_vec[1:3]
last2  <- names_vec[(n-1):n]
# Check if you are already in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(1:3, (n-1):n))) {
# You are not in first3 or last2 → put dots around
middle <- c("- ..", me_name, "- ...")
}
}
# Combine final list
out <- c(
paste0("- ", first3),
middle,
paste0("- ", last2)
)
}
out
}
# ----- FETCH PUBMED BY DOI -----
fetch_pubmed <- function(doi){
res <- entrez_search(db="pubmed", term=paste0(doi,"[DOI]"))
if(length(res$ids) == 0) return(NULL)
entrez_summary(db="pubmed", id=res$ids[1])
}
# ----- LOOP DOIs -----
for (doi in dois) {
rec <- fetch_pubmed(doi)
if(is.null(rec)) next
# Title
title <- escape_yaml(rec$title)
title <- gsub("\\.$", "", title)
# Authors
authors_yaml <- format_authors_pubmed(rec$authors)
# Journal info
journal <- escape_yaml(rec$fulljournalname)
volume  <- if(!is.null(rec$volume)) rec$volume else ""
issue   <- if(!is.null(rec$issue)) rec$issue else ""
pages   <- if(!is.null(rec$pages)) rec$pages else ""
journal_clean <- gsub("\\.$", "", journal)
# Build "publication" string
pub_str <- paste0(
"**", journal_clean, "**",
if(volume!="") paste0(". ", volume) else "",
if(issue!="") paste0("(", issue, ")") else "",
if(pages!="") paste0(":", pages) else "",
if(!is.null(rec$elocationid) && nzchar(rec$elocationid)) {
paste0(". <a href='https://doi.org/", doi,
"' target='_blank' rel='noopener noreferrer'>", doi, "</a>")
} else ""
)
# Use PubMed pubdate
pubdate_raw <- rec$pubdate  # e.g., "2024 Aug 27"
# Try to parse full date
date_parsed <- parse_date_time(pubdate_raw, orders = c("Y b d", "Y b", "Y"))
# Fallback if parsing fails
if (is.na(date_parsed)) {
year <- substr(pubdate_raw, 1, 4)
date_parsed <- ymd(paste0(year, "-01-01"))
}
# Format as YYYY-MM-DD
date <- format(date_parsed, "%Y-%m-%d")
# Filename with counter to avoid overwrites
first_author <- rec$sortfirstauthor
first_author <- gsub("[^A-Za-z0-9]", "", first_author)
base_name <- paste0(first_author, year)
file_name <- file.path(output_dir, paste0(base_name, ".md"))
counter <- 1
while (file.exists(file_name)) {
file_name <- file.path(output_dir, paste0(base_name, "_", counter, ".md"))
counter <- counter + 1
}
# Build front matter
fm <- c(
"---",
paste0('title: "', title, '"'),
paste0('publication: "', pub_str, '"'),
"authors:",
authors_yaml,
paste0('date: "', date, '"'),
"---"
)
# Write file
writeLines(fm, file_name, useBytes = TRUE)
message("✅ Written: ", file_name)
}
View(a)
fetch_pubmed('10.5588/ijtld.24.0503') ->a
authors_yaml <- format_authors_pubmed(a$authors)
authors_yaml
View(a)
a[["authors"]]
authors_yaml
a$authors
# ----- FORMAT AUTHORS FOR PUBMED -----
format_authors_pubmed <- function(df) {
if (nrow(df) == 0) return("[]")
names_vec <- as.character(df$name)  # ensure character, not factor
names_vec <- trimws(names_vec)       # remove leading/trailing spaces
me_idx <- grep("\\bRanzani\\b", names_vec, ignore.case = TRUE)
me_name <- "- otavioranzani"
n <- length(names_vec)
out <- c()
if (n <= 10) {
# List all authors, replacing your name
for (i in seq_len(n)) {
if (i %in% me_idx) {
out <- c(out, me_name)
} else {
out <- c(out, paste0("- ", names_vec[i]))
}
}
} else {
# >10 authors: first 3, last 2, insert you if not among them
first3 <- names_vec[1:3]
last2  <- names_vec[(n-1):n]
# Check if you are already in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(1:3, (n-1):n))) {
# You are not in first3 or last2 → put dots around
middle <- c("- ..", me_name, "- ...")
}
}
# Combine final list
out <- c(
paste0("- ", first3),
middle,
paste0("- ", last2)
)
}
out
}
authors_yaml <- format_authors_pubmed(a$authors)
authors_yaml
a$authors
# ----- FORMAT AUTHORS FOR PUBMED -----
format_authors_pubmed <- function(df) {
if (nrow(df) == 0) return("[]")
names_vec <- as.character(df$name)  # ensure character, not factor
names_vec <- trimws(names_vec)       # remove leading/trailing spaces
me_idx <- grep("Ranzani [A-Z]+|Ranzani [A-Z]$", names_vec, ignore.case = TRUE)
me_name <- "- otavioranzani"
n <- length(names_vec)
out <- c()
if (n <= 10) {
# List all authors, replacing your name
for (i in seq_len(n)) {
if (i %in% me_idx) {
out <- c(out, me_name)
} else {
out <- c(out, paste0("- ", names_vec[i]))
}
}
} else {
# >10 authors: first 3, last 2, insert you if not among them
first3 <- names_vec[1:3]
last2  <- names_vec[(n-1):n]
# Check if you are already in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(1:3, (n-1):n))) {
# You are not in first3 or last2 → put dots around
middle <- c("- ..", me_name, "- ...")
}
}
# Combine final list
out <- c(
paste0("- ", first3),
middle,
paste0("- ", last2)
)
}
out
}
authors_yaml <- format_authors_pubmed(a$authors)
authors_yaml
df<-a
if (nrow(df) == 0) return("[]")
df<-a$authors
if (nrow(df) == 0) return("[]")
names_vec <- as.character(df$name)  # ensure character, not factor
names_vec
names_vec <- as.character(df$name)  # ensure character, not factor
names_vec <- trimws(names_vec)       # remove leading/trailing spaces
names_vec
me_idx <- grep("Ranzani [A-Z]+|Ranzani [A-Z]$", names_vec, ignore.case = TRUE)
n <- length(names_vec)
out <- c()
# >10 authors: first 3, last 2, insert you if not among them
first3 <- names_vec[1:3]
last2  <- names_vec[(n-1):n]
# Check if you are already in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(1:3, (n-1):n))) {
# You are not in first3 or last2 → put dots around
middle <- c("- ..", me_name, "- ...")
}
}
last2
length(me_idx) > 0
names_vec
me_idx <- grep("Ranzani [A-Z]+|Ranzani [A-Z]$", names_vec, ignore.case = TRUE)
me_idx
# ----- FORMAT AUTHORS FOR PUBMED -----
format_authors_pubmed <- function(df) {
if (nrow(df) == 0) return("[]")
names_vec <- df$name
me_name <- "- otavioranzani"
# Identify all positions of "Ranzani" in names (any variant)
me_idx <- grep("Ranzani", names_vec, ignore.case = TRUE)
n <- length(names_vec)
out <- c()
if (n <= 10) {
# List all authors, replacing your name
for (i in seq_len(n)) {
if (i %in% me_idx) {
out <- c(out, me_name)
} else {
out <- c(out, paste0("- ", names_vec[i]))
}
}
} else {
# >10 authors: first 3, last 2, insert you in middle if not in first3 or last2
first3_idx <- 1:3
last2_idx  <- (n-1):n
# Build first3
first3 <- lapply(names_vec[first3_idx], function(x) {
if (grepl("Ranzani", x, ignore.case = TRUE)) me_name else paste0("- ", x)
})
# Build last2
last2 <- lapply(names_vec[last2_idx], function(x) {
if (grepl("Ranzani", x, ignore.case = TRUE)) me_name else paste0("- ", x)
})
# Middle: only if your name is not in first3 or last2
middle <- c()
if (length(me_idx) > 0) {
me_pos <- me_idx[1]
if (!(me_pos %in% c(first3_idx, last2_idx))) {
middle <- c("- ..", me_name, "- ...")
}
}
# Combine final list
out <- c(first3, middle, last2)
}
unlist(out)
}
# ----- FETCH PUBMED BY DOI -----
fetch_pubmed <- function(doi){
res <- entrez_search(db="pubmed", term=paste0(doi,"[DOI]"))
if(length(res$ids) == 0) return(NULL)
entrez_summary(db="pubmed", id=res$ids[1])
}
# ----- LOOP DOIs -----
for (doi in dois) {
rec <- fetch_pubmed(doi)
if(is.null(rec)) next
# Title
title <- escape_yaml(rec$title)
title <- gsub("\\.$", "", title)
# Authors
authors_yaml <- format_authors_pubmed(rec$authors)
# Journal info
journal <- escape_yaml(rec$fulljournalname)
volume  <- if(!is.null(rec$volume)) rec$volume else ""
issue   <- if(!is.null(rec$issue)) rec$issue else ""
pages   <- if(!is.null(rec$pages)) rec$pages else ""
journal_clean <- gsub("\\.$", "", journal)
# Build "publication" string
pub_str <- paste0(
"**", journal_clean, "**",
if(volume!="") paste0(". ", volume) else "",
if(issue!="") paste0("(", issue, ")") else "",
if(pages!="") paste0(":", pages) else "",
if(!is.null(rec$elocationid) && nzchar(rec$elocationid)) {
paste0(". <a href='https://doi.org/", doi,
"' target='_blank' rel='noopener noreferrer'>", doi, "</a>")
} else ""
)
# Use PubMed pubdate
pubdate_raw <- rec$pubdate  # e.g., "2024 Aug 27"
# Try to parse full date
date_parsed <- parse_date_time(pubdate_raw, orders = c("Y b d", "Y b", "Y"))
# Fallback if parsing fails
if (is.na(date_parsed)) {
year <- substr(pubdate_raw, 1, 4)
date_parsed <- ymd(paste0(year, "-01-01"))
}
# Format as YYYY-MM-DD
date <- format(date_parsed, "%Y-%m-%d")
# Filename with counter to avoid overwrites
first_author <- rec$sortfirstauthor
first_author <- gsub("[^A-Za-z0-9]", "", first_author)
base_name <- paste0(first_author, year)
file_name <- file.path(output_dir, paste0(base_name, ".md"))
counter <- 1
while (file.exists(file_name)) {
file_name <- file.path(output_dir, paste0(base_name, "_", counter, ".md"))
counter <- counter + 1
}
# Build front matter
fm <- c(
"---",
paste0('title: "', title, '"'),
paste0('publication: "', pub_str, '"'),
"authors:",
authors_yaml,
paste0('date: "', date, '"'),
"---"
)
# Write file
writeLines(fm, file_name, useBytes = TRUE)
message("✅ Written: ", file_name)
}
